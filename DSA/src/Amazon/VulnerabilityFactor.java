package Amazon;

public class VulnerabilityFactor {

	public static void main(String[] args) {
		 int[] key = {5, 10, 20, 10, 15, 5};
	        int maxChange = 2;
	        int minVulnerability = findMinVulnerability(key, maxChange);
	        System.out.println("Least possible vulnerability factor: " + minVulnerability);

	}

	public static int findMinVulnerability(int[] key, int maxChange) {
	        int n = key.length;
	        int low = 1, high = n;
	        int result = n;

	        while (low <= high) {
	            int mid = (low + high) / 2;

	            if (isValid(key, maxChange, mid)) {
	                result = mid;
	                high = mid - 1;
	            } else {
	                low = mid + 1;
	            }
	        }

	        return result;
	    }

	    private static boolean isValid(int[] key, int maxChange, int maxLength) {
	        int n = key.length;

	        for (int i = 0; i <= n - maxLength; i++) {
	            int changesNeeded = 0;
	            int gcd = key[i];

	            for (int j = i; j < i + maxLength; j++) {
	                gcd = gcd(gcd, key[j]);
	            }

	            if (gcd > 1) {
	                // Try breaking it by counting how many elements we'd need to change
	                for (int j = i; j < i + maxLength; j++) {
	                    if (gcd(key[j], gcd) == gcd) {
	                        continue; // okay
	                    } else {
	                        changesNeeded++;
	                    }
	                }

	                if (changesNeeded <= maxChange) return true;
	            } else {
	                return true; // already OK
	            }
	        }

	        return false;
	    }

	    private static int gcd(int a, int b) {
	        return b == 0 ? a : gcd(b, a % b);
	    }

}
